<?php

define('NODEREVIEW_FIVESTAR_ENABLE', module_exists('fivestar') && (variable_get('nodereview_rating_type', '') == 'fivestar'));
define('NODEREVIEW_LABEL_ENABLE', (variable_get('nodereview_rating_type', '') == 'label'));
define('NODEREVIEW_MAXRATING', variable_get('nodereview_maxrating', 5));


module_load_include('pages.inc', 'node');
module_load_include('inc', 'nodereview', 'nodereview_node_nodereview');

/**
 * @file
 * This module adds user reviews to specified node types, on multiple axes and with
 * voting via the Voting API module (required).  It uses the Views module
 * (required) for some displays.
 */

/**
 * Implements of hook_help().
 */
function nodereview_help($path, $arg) {
  switch ($path) {

    case 'node/%/addreview':
      $reviewed_nid = $arg[1];
      $reviewed_node = node_load($reviewed_nid);
      $help_text = filter_xss_admin(variable_get('nodereview_guide_' . $reviewed_node->type, ''));
      return $help_text;

    case 'node/%/editreview':
      // Get the type of the node we're reviewing, which is not the nid in the path
      $sql = "SELECT n.type
              FROM {node} n
              INNER join {nodereview} nr ON n.nid = nr.reviewed_nid
              WHERE nr.reviewed_nid = :nid";

      $record = db_query($sql, array(':nid' => $arg[1]));
      $record = (object)$record->fetchAssoc();

      $help_text = filter_xss_admin(variable_get('nodereview_guide_' . $record->type, ''));
      return $help_text;
  }
}

/**
 * Implements of hook_node_info().
 */
function nodereview_node_info() {
  return array(
    'nodereview' => array(
      'name' => t('Review'),
      'base' => 'nodereview',
      'module' => 'nodereview',
      'description' => 'A review is a user-supplied critique of another node.',
      'has_title' => TRUE,
      'title_label' => t('Short comment'),
      'has_body' => FALSE,
    )
  );
}

/**
 * Implements of hook_permission().
 */
function nodereview_permission() {
  return array(
    'administer reviews' => array(
      'title' => t('Administer reviews'),
    ),
    'read reviews' => array(
      'title' => t('Read reviews'),
    ),
    'submit reviews' => array(
      'title' => t('Submit reviews'),
    ),
    'edit own reviews' => array(
      'title' => t('Edit own reviews'),
    ),
  );
}

/**
 * Implements of hook_menu().
 */
function nodereview_menu() {
  $items = array();

  $items['admin/config/nodereview'] = array(
    'title' => 'Review types',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodereview_configure'),
    'file' => 'nodereview.admin.inc',
    'access arguments' => array('administer reviews'),
    'description' => 'Configure the axes for node type review',
  );

  $items['admin/config/nodereview/types'] = array(
    'title' => 'List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodereview_configure'),
    'file' => 'nodereview.admin.inc',
    'access arguments' => array('administer reviews'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  // Add a tab for each node type that we can review
  // It's slow to put this here, as it should go in
  foreach (node_type_get_types() as $type => $info) {
    if (variable_get('nodereview_use_' . $type, 0)) {
      $items['admin/config/nodereview/' . $type] = array(
        'title callback' => 'check_plain',
        'title arguments' => array($info->name),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('nodereview_configure_axes', $type, $info->name),
        'file' => 'nodereview.admin.inc',
        'access arguments' => array('administer reviews'),
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  $items['node/%/reviews'] = array(
    'title' => 'Reviews',
    'page callback' => 'views_page',
    'page arguments' => array('review_list', 'page_1', 1),
    'access callback' => 'read_reviews_access',
    'access arguments' => array(1),
    'file' => 'views.module',
    'file path' => drupal_get_path('module', 'views'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  $items['node/%node_add_review/addreview'] = array(
    'title callback' => 'nodereview_add_review_title',
    'page callback' => 'nodereview_node_add_form',
    'page arguments' => array(1),
    'access callback' => 'addreview_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  $items['node/%node_edit_review/editreview'] = array(
    'title' => 'Edit your review',
    'page callback' => 'node_page_edit',
    'page arguments' => array(1),
    'access arguments' => array('edit own reviews'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  return $items;
}

/**
 * Create title for page add node of type nodereview
 * @return string
 */
function nodereview_add_review_title() {
  if (arg(2) == 'addreview') {
    drupal_set_title(t('Create @name', array('@name' => 'nodereview')), PASS_THROUGH);
  }
  return 'Add review';
}

/**
 * Returned node_add form for add/edit nodereview content type
 * @param int $reviewed_nid
 * @return array
 */
function nodereview_node_add_form($reviewed_nid) {
  global $user;
  $new_nodereview = (object)array(
    'uid' => $user->uid,
    'name' => (!empty($user->name) ? $user->name : ''),
    'type' => 'nodereview',
    'language' => LANGUAGE_NONE,
    'reviewed_nid' => $reviewed_nid,
  );
  return drupal_get_form('nodereview_node_form', $new_nodereview);
}

/**
 * Implements of hook_menu_alter().
 */
function nodereview_menu_alter(&$callbacks) {
  // Hide the normal node-add page, since we never want users to see it
  unset($callbacks['node/add/nodereview']);
}

/**
 * Implements of hook_form_alter().
 */
function nodereview_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'node_type_form') {

    // variable_set('nodereview_node_types', array());
    $node_type = $form['old_type']['#value'];

    // We don't use the normal submission guidelines anyway, so hide the form field for them.
    if ($node_type == 'nodereview') {
      $form['submission']['help']['#type'] = 'value';
      $form['submission']['help']['#value'] = '';
    }

    // The node type form automatically appends the node type to the variable name when saving
    if ($form['#node_type']->type != 'nodereview') {
      $form['workflow']['nodereview_use'] = array(
        '#type' => 'radios',
        '#title' => t('Enable user reviews'),
        '#default_value' => variable_get('nodereview_use_' . $node_type, 0),
        '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
        '#description' => t('You can configure axes for reviewable nodes on the <a href="!url">reviews page</a>.', array('!url' => url('admin/config/nodereview'))),
      );
    }

    if ($form['#node_type']->type == 'nodereview') {
      $form['workflow']['node_options'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Default options'),
        '#default_value' => variable_get('node_options_' . $node_type, array('status')),
        '#options' => array(
          'status' => t('Published'),
          'sticky' => t('Sticky at top of lists'),
          'revision' => t('Create new revision'),
        ),
        '#description' => t('Users with the <em>Administer content</em> permission will be able to override these options.'),
      );
    }
  }

  // should not also be listed in front page, it's not a regular node, you can check the
  if ($form_id == 'nodereview_node_form') {
    $form['options']['promote'] = array(
      '#default_value' => 0,
    );
  }
}

/**
 * Implements of hook_theme().
 *
 * We declare  nodereview_configure_axes so
 * Drupal will look for a function named theme_nodereview_configure_axes().
 */
function nodereview_theme() {
  return array(
    'nodereview_configure_axes' => array(
      'render element' => 'form',
      'file' => 'nodereview.theme.inc',
    ),

    'nodereview_review_body' => array(
      'variables' => array('review' => NULL, 'node' => NULL),
      'file' => 'nodereview.theme.inc',
    ),
    'nodereview_review_preview' => array(
      'variables' => array('review' => NULL, 'node' => NULL),
      'file' => 'nodereview.theme.inc',
    ),
    'nodereview_teaser' => array(
      'variables' => array('node' => NULL),
      'file' => 'nodereview.theme.inc',
    ),
  );
}

/**
 * @param $node_type
 * @return null
 */
function nodereview_list_axes($node_type) {
  static $axes = array();
  if (empty($axes[$node_type])) {
    $sql = "SELECT na.aid, na.tag FROM {nodereview_axes} na WHERE na.node_type = :type";
    $result = db_query($sql, array(':type' => $node_type));

    while ($record = $result->fetchObject()) {
      $axes[$node_type][$record->aid] = $record->tag;
    }
  }
  return (!empty($axes[$node_type])) ? $axes[$node_type] : NULL;
}

/**
 * Implements of hook_node_type().
 *
 * To clear the cache when a content type
 * is modified and the changes to reflect
 * in nodereview settings page
 *
 */
function nodereview_node_type($op, $info) {
  cache_clear_all();
  menu_rebuild();
}

/**
 * Implements of hook_views_api().
 *
 */
function nodereview_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'nodereview') . '/views',
  );
}

/**
 * Menu callback
 * Returns TRUE if no review for the current node from current user
 * Returns FALSE if review review for the current node from current user
 */
function node_add_review_load($arg) {
  global $user;
  $add_review = FALSE;
  $current_node = node_load((int)$arg);
  $type = $current_node->type;
  //check to see if the nodereview form should be embedded. If it should, just
  //return FALSE immediately becuase there is no point querying the DB.
  if (variable_get('nodereview_embed_' . $type, 0) == 1) {
    return $add_review;
  }

  $is_axes = db_query("SELECT COUNT(*) as qty FROM {nodereview_axes} WHERE node_type = :type", array(':type' => $type))->fetchField();
  if (variable_get('nodereview_use_' . $type, 0) && $is_axes) {
    $add_review = db_query("SELECT n.nid FROM {node} n INNER JOIN {nodereview} nr ON n.nid = nr.nid WHERE uid = :uid AND reviewed_nid = :nid", array(':uid' => $user->uid, ':nid' => $arg))->fetchObject();
  }
  return $add_review ? FALSE : $arg;
}

/**
 * Menu callback
 * Returns FALSE if no review for the current node from current user
 * Returns review node object if review for the current node exists to alter the review
 */
function node_edit_review_load($arg) {
  global $user;
  $edit_review = FALSE;
  $current_node = node_load((int)$arg);
  $type = $current_node->type;
  //check to see if the nodereview form should be embedded. If it should, just
  //return FALSE immediately becuase there is no point querying the DB.
  if (variable_get('nodereview_embed_' . $type, 0) == 1) {
    return $edit_review;
  }

  $axes_count = db_query("SELECT COUNT(*) FROM {nodereview_axes} WHERE node_type = :type", array(':type' => $type))->fetchObject();

  if (variable_get('nodereview_use_' . $type, 0) && $axes_count) {
    $edit_review = db_query("SELECT n.nid FROM {node} n INNER JOIN {nodereview} nr ON n.nid = nr.nid WHERE uid = :uid AND reviewed_nid = :nid", array(':uid' => $user->uid, ':nid' => $arg))->fetchObject();
  }
  return $edit_review ? node_load($edit_review->nid) : FALSE;
}

/**
 * Custom access menucallback for add review
 */
function addreview_access($arg, $account = NULL) {
  $current_node = node_load((int)$arg);
  $type = $current_node->type;
  $axes_count = db_query("SELECT COUNT(*) FROM {nodereview_axes} WHERE node_type = :type", array(':type' => $type))->fetchObject();
  return variable_get('nodereview_use_' . $type, 0) && $axes_count && user_access('submit reviews');
}

/**
 * Custom access menucallback for read review
 */
function read_reviews_access($arg) {
  $current_node = node_load((int)$arg);
  $type = $current_node->type;
  return variable_get('nodereview_use_' . $type, 0) && user_access('read reviews');
}

/**
 * Implements of hook_node_view().
 */
function nodereview_node_view($node, $view_mode, $langcode) {
  global $user;
  // The 'view' operation means the node is about to be displayed.

  // Abort if it's not a page
  if ($view_mode != 'full') {
    return '';
  }

  // Should only appear and process on content type with review.
  if (variable_get('nodereview_use_' . $node->type, 0)) {

    //Get node id, tags and value for this node
    $sql = "SELECT vote_id, value, uid FROM {votingapi_vote} WHERE entity_id = :entity_id";

    $result = db_query($sql, array(':entity_id' => $node->nid));

    $votes = array();
    $total_value = '';
    while ($record = $result->fetchObject()) {
      $votes[] = $record->vote_id;
      $total_value += $record->value;
      $users[$record->uid] = 1;
    }
    if (!empty($total_value)) {
      $vote_count = count($votes);
      //print $vote_count . ' votes <br />';
      //print $total_value . ' total value <br />';
      $user_count = count($users);
      //print $user_count . ' users <br />';
      $total = round($total_value / count($votes));
      //print $total . ' avarage <br />';
      $maxrating_proportion = round(($total / 100) * NODEREVIEW_MAXRATING);
      //print $maxrating_proportion . ' maxrating proportion <br />';
      //print NODEREVIEW_MAXRATING . ' maxrating (global)';

      if (NODEREVIEW_FIVESTAR_ENABLE) {
        $total = round($total_value / $vote_count) . '%';
      }
      elseif (NODEREVIEW_LABEL_ENABLE) {
        $total = variable_get('nodereview_rating_label' . $maxrating_proportion, '');
        if (!$total) {
          drupal_set_message(t('You have no assigned label rating on your settings.'), 'error', TRUE);
        }
      }
      else {
        $total = $maxrating_proportion . '/' . NODEREVIEW_MAXRATING;
      }

      $node->content['review_total'] = array(
        '#prefix' => '<div class="box nodereview-average-rating"><h2><span class="label">'
                     . t('Average Review Rating') . ':</span> ',
        '#suffix' => '</h2><h3>' . t('Total Reviews') . ': ' . $user_count . '</h3></div> ',
        '#value' => $total,
        '#weight' => 0,
      );
    }
  }

  if ($node->type == 'nodereview') {
    $query = db_select('node', 'n')
      ->fields('n', array('type'))
      ->condition('nid', (int)$node->reviewed_nid)
      ->execute();
    $reviewed_type = $query->fetchField();

    // Add a link back to the node being reviewed by this node
    $node->content['links']['#links']['nodereview'] = array(
      'title' => t('View @type', array('@type' => $reviewed_type)),
      'href' => "node/{$node->reviewed_nid}",
      'attributes' => array('title' => t('View the @type being reviewed', array('@type' => $reviewed_type))),
    );

  }
  
  //Check to see if this node type should have embedded reviews and that the user
  //has accesss to submit reviews.
  if (variable_get('nodereview_embed_' . $node->type, 0) == 1 && user_access('submit reviews')) {
    $user_has_review = nodereview_user_has_review($node->nid, $user->uid);

    //If there is no existing review, embed the node_add form for nodereviews.
    //If there is an existing review and the user has access to edit own reviews, load the review and pass it to node_page_edit.
    if (!$user_has_review) {
      $node->content['nodereview_form'] = nodereview_node_add_form($node->nid);
      $node->content['nodereview_form']['#weight'] = 5;
    }
    elseif ($user_has_review && user_access('edit own reviews')) {
      $edit_review = db_query("SELECT n.nid FROM {node} n INNER JOIN {nodereview} nr ON n.nid = nr.nid WHERE uid = :uid AND reviewed_nid = :nid", array(':uid' => $user->uid, ':nid' => $node->nid))->fetchObject();
      $review_node = node_load((int)$edit_review->nid);
      $node->content['nodereview_form'] = drupal_get_form('nodereview_node_form', $review_node);
      $node->content['nodereview_form']['#weight'] = 5;
    }
  }

  return $node;
}

/**
 * This function returns the total number reviews for a node with $nid
 * @param int $nid
 * @return int
 */
function nodereview_get_count_reviews($nid) {
  return (int)db_select('nodereview', 'n')
    ->fields('n', array('nid'))
    ->condition('n.reviewed_nid', (int)$nid)
    ->execute()
    ->rowCount();
}

/**
 * Check if user has created review for given node
 * @param int $nid Node, which can has reviews
 * @param int $uid User uid to check for
 * @return bool
 */
function nodereview_user_has_review($nid, $uid) {
  $query = db_select('node', 'n');
  $query->join('nodereview', 'nr', 'nr.nid = n.nid');
  $query->fields('n', array('uid'));
  $query->condition('nr.reviewed_nid', (int) $nid, '=');
  $query->condition('type', 'nodereview', '=');
  $query->condition('uid', (int) $uid, '=');
  $result = $query->execute()->fetchField();
  return !empty($result);
}
